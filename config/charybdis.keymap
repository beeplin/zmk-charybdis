#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
    require-prior-idle-ms = <10>;
};

&mt {
    tapping-term-ms = <250>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <250>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_left_click {
            bindings = <&mkp LCLK>;
            key-positions = <19 20>;
        };

        combo_right_click {
            bindings = <&mkp RCLK>;
            key-positions = <20 21>;
        };

        combo_middle_click {
            bindings = <&mkp MCLK>;
            key-positions = <19 20 21>;
        };

        combo_lefe {
            bindings = <&kp LEFT>;
            key-positions = <43 44>;
        };

        combo_right {
            bindings = <&kp RIGHT>;
            key-positions = <44 45>;
        };

        combo_capture_screen {
            bindings = <&kp LS(LC(LG(N4)))>;
            key-positions = <13 14 15>;
        };

        combo_left2 {
            bindings = <&kp LEFT>;
            key-positions = <38 39>;
        };

        combo_right2 {
            bindings = <&kp RIGHT>;
            key-positions = <40 39>;
        };

        combo_tog3 {
            bindings = <&tog 3>;
            key-positions = <10 11>;
        };
    };

    behaviors {
        Shift_Enter: Shift_Enter {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <34>;
            tapping-term-ms = <100>;
        };

        super_bspc: super_backspace {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        grave_escape: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            bindings = <&kp ESC>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&grave_escape   &kp N1      &kp N2      &kp N3        &kp N4            &kp N5    &kp N6       &kp N7             &kp N8               &kp N9          &kp N0              &kp MINUS
&kp TAB         &kp Q       &kp W       &kp E         &kp R             &kp T     &kp Y        &kp U              &kp I                &kp O           &kp P               &kp LEFT_BRACKET
&kp LCTRL       &mt LGUI A  &mt LALT S  &mt LCTRL D   &mt LEFT_SHIFT F  &kp G     &kp H        &mt RIGHT_SHIFT J  &mt RIGHT_CONTROL K  &mt LEFT_ALT L  &mt RIGHT_GUI SEMI  &kp APOS
&kp LEFT_SHIFT  &lt 2 Z     &lt 5 X     &kp C         &kp V             &kp B     &kp N        &kp M              &kp COMMA            &kp PERIOD      &lt 3 SLASH         &mo 4
                                        &kp LEFT_GUI  &kp SPACE         &sl 7     &kp ENTER    &super_bspc
                                                      &kp LEFT_ALT      &mo 1     &lt 2 RIGHT
            >;
        };

        Num {
            bindings = <
&kp LG(GRAVE)  &none     &none         &none         &none        &none         &none         &none          &none      &none      &none         &none
&none          &none     &none         &none         &kp LS(DEL)  &kp DELETE    &kp KP_MINUS  &kp KP_N7      &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &none
&none          &kp LEFT  &kp UP_ARROW  &kp DOWN      &kp RIGHT    &none         &kp KP_SLASH  &kp KP_N4      &kp KP_N5  &kp KP_N6  &kp KP_PLUS   &kp LOCKING_NUM
&none          &none     &none         &none         &none        &none         &kp KP_DOT    &kp KP_N1      &kp KP_N2  &kp KP_N3  &mkp LCLK     &mkp RCLK
                                       &kp LEFT_GUI  &kp SPACE    &to 0         &kp KP_N0     &kp BACKSPACE
                                                     &none        &none         &none
            >;
        };

        layer_2 {
            bindings = <
&kp F11           &kp F1      &kp F2        &kp F3          &kp F4           &kp F5        &kp F6      &kp F7           &kp F8             &kp F9        &kp F10        &kp F12
&kp C_PREV        &kp LS(N1)  &kp LS(N2)    &kp LS(N3)      &kp LS(N4)       &kp LS(N5)    &kp LS(N6)  &kp LS(N7)       &kp LS(N8)         &kp LS(N9)    &kp LS(N0)     &kp LS(MINUS)
&kp C_PLAY_PAUSE  &kp LEFT    &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp TAB       &none       &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp LEFT_ALT  &kp RIGHT_WIN  &kp C_VOL_UP
&kp LS(C_NEXT)    &none       &none         &none           &none            &none         &none       &none            &none              &none         &kp C_MUTE     &kp C_VOL_DN
                                            &to 0           &kp SPACE        &to 0         &kp LEFT    &kp RIGHT
                                                            &trans           &trans        &none
            >;
        };

        fun_layer {
            bindings = <
&none         &none         &none         &none              &none         &none                    &none              &none            &bt BT_CLR  &none   &none      &none
&kp TAB       &kp GRAVE     &kp K_MUTE    &kp C_VOLUME_DOWN  &kp C_VOL_UP  &out OUT_TOG             &kp F10            &kp F7           &kp F8      &kp F9  &kp F10    &kp F12
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3       &bt BT_SEL 4  &none                    &kp LG(LA(LEFT))   &kp F4           &kp F5      &kp F6  &mkp LCLK  &kp F11
&kp LS(TAB)   &none         &kp C_PREV    &kp C_PP           &kp C_NEXT    &kp LG(LA(BACKSLASH))    &kp LG(LA(RIGHT))  &kp F1           &kp F2      &kp F3  &mkp LCLK  &mkp RCLK
                                          &mkp RCLK          &mkp LCLK     &mkp MCLK                &kp LG(LA(COMMA))  &kp LG(LA(DOT))
                                                             &kp LEFT_GUI  &kp LEFT_ALT             &kp LG(LA(SLASH))
            >;
        };

        Scroll {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                     &none  &none  &none    &none  &none
                            &none  &none    &none
            >;
        };

        Snipe {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                     &none  &none  &none    &none  &none
                            &none  &none    &none
            >;
        };

        DeadState {
            bindings = <
&kp ESC  &none      &none     &none           &none            &none         &none      &none              &none         &none       &none          &none
&none    &kp AMPS   &kp LBKT  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LPAR      &kp EQUAL  &kp STAR           &kp RPAR      &kp PLUS    &kp RBKT       &kp BACKSLASH
&none    &kp TILDE  &kp AT    &kp LT          &kp GT           &kp MINUS     &kp GRAVE  &kp DOUBLE_QUOTES  &kp COLON     &kp DOLLAR  &kp BACKSLASH  &none
&none    &kp PRCNT  &kp HASH  &none           &none            &kp UNDER     &kp PIPE   &kp EXCL           &kp QUESTION  &kp CARET   &kp SLASH      &mo 4
                              &to 0           &kp SPACE        &sk LSHIFT    &kp TAB    &kp BACKSPACE
                                              &to 0            &to 0         &to 0
            >;
        };

        Dvorak_DeadState {
            bindings = <
&kp ESC  &none       &none      &none      &none      &none             &none     &none          &none         &none         &none          &none
&none    &kp N1      &kp N2     &kp N3     &kp N4     &kp N5            &kp N6    &kp N7         &kp N8        &kp N9        &kp N0         &kp BACKSLASH
&none    &kp TILDE   &kp RBKT   &kp LS(W)  &kp LS(E)  &kp KP_MINUS      &kp PLUS  &kp LS(Z)      &kp LS(Q)     &kp GRAVE     &kp BACKSLASH  &none
&none    &kp LS(N1)  &kp EQUAL  &none      &none      &kp LS(SQT)       &kp PIPE  &kp MINUS      &kp LS(LBKT)  &kp LS(RBKT)  &kp LBKT       &mo 4
                                &to 0      &kp SPACE  &sk LEFT_SHIFT    &kp TAB   &kp BACKSPACE
                                           &to 0      &to 0             &to 0
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
